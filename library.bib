@inproceedings{Rideau-Leroy-regalloc,
  author = {Silvain Rideau and Xavier Leroy},
  title = {Validating register allocation and spilling},
  booktitle = {Compiler Construction (CC 2010)},
  year = 2010,
  publisher = {Springer},
  series = {Lecture Notes in Computer Science},
  volume = 6011,
  pages = {224-243},
  xtopic = {compcert},
  url = {http://xavierleroy.org/publi/validation-regalloc.pdf},
  urlpublisher = {http://dx.doi.org/10.1007/978-3-642-11970-5_13},
  abstract = {Following the translation validation approach to high-assurance
compilation, we describe a new algorithm for validating {\em a
posteriori} the results of a run of register allocation.  The
algorithm is based on backward dataflow inference of
equations between variables, registers and stack locations, and can
cope with sophisticated forms of spilling and live range splitting, as
well as many forms of architectural irregularities such as overlapping
registers.  The soundness of the algorithm was mechanically proved
using the Coq proof assistant.}
}

@article{Rideau-Serpette-Leroy-parmov,
  author = {Laurence Rideau and Bernard P. Serpette and
                         Xavier Leroy},
  title = {Tilting at windmills with {Coq}:
                         formal verification of a compilation algorithm
                         for parallel moves},
  journal = {Journal of Automated Reasoning},
  year = {2008},
  volume = 40,
  number = 4,
  pages = {307--326},
  xtopic = {compcert},
  urllocal = {https://xavierleroy.org/publi/parallel-move.pdf},
  urlpublisher = {https://doi.org/10.1007/s10817-007-9096-8},
  doi = {10.1007/s10817-007-9096-8},
  abstract = {
This article describes the formal verification of a compilation algorithm
that transforms parallel moves (parallel assignments between variables)
into a semantically-equivalent sequence of elementary moves.
Two different specifications of the algorithm are given: an inductive
specification and a functional one, each with its correctness proofs.
A functional program can then be extracted and integrated in the
Compcert verified compiler.}
}

@article{10.1145/2578855.2535841,
author = {Kumar, Ramana and Myreen, Magnus O. and Norrish, Michael and Owens, Scott},
title = {CakeML: a verified implementation of ML},
year = {2014},
issue_date = {January 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2578855.2535841},
doi = {10.1145/2578855.2535841},
abstract = {We have developed and mechanically verified an ML system called CakeML, which supports a substantial subset of Standard ML. CakeML is implemented as an interactive read-eval-print loop (REPL) in x86-64 machine code. Our correctness theorem ensures that this REPL implementation prints only those results permitted by the semantics of CakeML. Our verification effort touches on a breadth of topics including lexing, parsing, type checking, incremental and dynamic compilation, garbage collection, arbitrary-precision arithmetic, and compiler bootstrapping.Our contributions are twofold. The first is simply in building a system that is end-to-end verified, demonstrating that each piece of such a verification effort can in practice be composed with the others, and ensuring that none of the pieces rely on any over-simplifying assumptions. The second is developing novel approaches to some of the more challenging aspects of the verification. In particular, our formally verified compiler can bootstrap itself: we apply the verified compiler to itself to produce a verified machine-code implementation of the compiler. Additionally, our compiler proof handles diverging input programs with a lightweight approach based on logical timeout exceptions. The entire development was carried out in the HOL4 theorem prover.},
journal = {SIGPLAN Not.},
month = jan,
pages = {179–191},
numpages = {13},
keywords = {ML, compiler bootstrapping, compiler verification, machine code verification, read-eval-print loop, verified garbage collection., verified parsing, verified type checking}
}

@manual{intel-sdm-vol1,
  author       = {{Intel Corporation}},
  title        = {Intel\textregistered{} 64 and IA-32 Architectures Software Developer’s Manual},
  year         = {2015},
  month        = {June},
  volume       = {1},
  organization = {Intel Corporation},
  address      = {2200 Mission College Blvd., Santa Clara, CA 95054-1549, USA},
  language     = {English}
}

@CONFERENCE{HGG:2006:RA-SSA,
  author = {Sebastian Hack and Daniel Grund and Gerhard Goos},
  title = {{R}egister {A}llocation for {P}rograms in {SSA}-{F}orm},
  booktitle = {Compiler Construction},
  booktitle_short = {CC},
  year = {2006},
  editor = {Andreas Zeller and Alan Mycroft},
  volume = {3923},
  series = {Lecture Notes In Computer Science},
  pages = {247--262},
  month = {March},
  publisher = {Springer},
  webpdf = {https://compilers.cs.uni-saarland.de/papers/ssara.pdf},
  abstract = {As register allocation is one of the most important phases in optimizingcompilers,
much work has been done to improve its quality and speed. We present
a novel register allocation architecture for programs in SSA-form
which simplifies register allocation significantly. We investigate certain
properties of SSA-programs and their interference graphs, showing
that they belong to the class of chordal graphs. This leads to a quadratic-time
optimal coloring algorithm and allows for decoupling the tasks of
coloring, spilling and coalescing completely. After presenting heuristic
methods for spilling and coalescing, we compare our coalescing heuristic
to an optimal method based on integer linear programming.},
doi = {10.1007/11688839_20},
journal = {Lecture Notes In Computer Science}
}

@book{golumbic2004algorithmic,
  title={Algorithmic Graph Theory and Perfect Graphs},
  author={Golumbic, M.C.},
  isbn={9780080526966},
  series={Annals of Discrete Mathematics},
  url={https://books.google.it/books?id=8xo-VrWo5_QC},
  year={2004},
  publisher={North Holland}
}